package linux

import (
	"fmt"
	"io"
	"log"

	"github.com/paypal/gatt/linux/internal/cmd"
	"github.com/paypal/gatt/linux/internal/device"
	"github.com/paypal/gatt/linux/internal/event"
	"github.com/paypal/gatt/linux/internal/hci"
	"github.com/paypal/gatt/linux/internal/l2cap"
)

type HCI struct {
	d io.ReadWriteCloser
	c *cmd.Cmd
	e *event.Event
	l *l2cap.L2CAP
}

func NewHCI(adv l2cap.L2adv, maxConn int) *HCI {
	d, err := device.NewSocket(1)
	if err != nil {
		d, err = device.NewSocket(0)
		if err != nil {
			return nil
		}
	}
	c := cmd.NewCmd(d)
	l := l2cap.NewL2CAP(c, d, adv, maxConn)
	e := event.NewEvent()

	e.HandleEvent(event.LEMeta, event.HandlerFunc(l.HandleLEMeta))
	e.HandleEvent(event.DisconnectionComplete, event.HandlerFunc(l.HandleDisconnectionComplete))
	e.HandleEvent(event.NumberOfCompletedPkts, event.HandlerFunc(l.HandleNumberOfCompletedPkts))
	e.HandleEvent(event.CommandComplete, event.HandlerFunc(c.HandleComplete))
	e.HandleEvent(event.CommandStatus, event.HandlerFunc(c.HandleStatus))

	return &HCI{d: d, c: c, e: e, l: l}
}

func (h *HCI) ConnC() chan *l2cap.Conn {
	return h.l.ConnC()
}

func (h *HCI) Close() error {
	return h.d.Close()
}

func (h *HCI) Start() error {
	go h.mainLoop()
	return h.resetDevice()
}

func (h *HCI) Advertise() error {
	return h.c.SendAndCheckResp(
		cmd.LESetAdvertiseEnable{AdvertisingEnable: 1}, []byte{0x00})
}

func (h *HCI) StopAdvertising() error {
	return h.c.SendAndCheckResp(
		cmd.LESetAdvertiseEnable{AdvertisingEnable: 0}, []byte{0x00})
}

func (h *HCI) SetAdvertisingParameters(intMin, intMax uint16, chnlMap uint8) error {
	return h.c.SendAndCheckResp(
		cmd.LESetAdvertisingParameters{
			AdvertisingIntervalMin: intMin,
			AdvertisingIntervalMax: intMax,
			AdvertisingChannelMap:  chnlMap,
		}, []byte{0x00})
}

func (h *HCI) SetScanResponsePacket(n uint8, data [31]byte) error {
	return h.c.SendAndCheckResp(
		cmd.LESetScanResponseData{
			ScanResponseDataLength: n,
			ScanResponseData:       data,
		}, []byte{0x00})
}

func (h *HCI) SetAdvertisingData(n uint8, data [31]byte) error {
	return h.c.SendAndCheckResp(
		cmd.LESetAdvertisingData{
			AdvertisingDataLength: n,
			AdvertisingData:       data,
		}, []byte{0x00})
}

func (h *HCI) Ping() error {
	return h.c.SendAndCheckResp(cmd.LEReadBufferSize{}, []byte{0x00})
}

func (h *HCI) Scan() error {
	return h.c.SendAndCheckResp(
		cmd.LESetScanEnable{
			LEScanEnable:     1,
			FilterDuplicates: 1,
		}, []byte{0x00})
}

func (h *HCI) StopScan() error {
	return h.c.SendAndCheckResp(
		cmd.LESetScanEnable{
			LEScanEnable:     0,
			FilterDuplicates: 1,
		}, []byte{0x00})
}

func (h *HCI) mainLoop() {
	b := make([]byte, 4096)
	for {
		n, err := h.d.Read(b)
		if err != nil {
			log.Printf("Failed to Read: %s", err)
			return
		}
		if n == 0 {
			log.Printf("Dev Read 0 byte. fd had been closed")
			return
		}
		p := make([]byte, n)
		copy(p, b)
		go h.handlePacket(p)
	}
}

func (h *HCI) handlePacket(b []byte) {
	t, b := hci.PacketType(b[0]), b[1:]
	var err error
	switch t {
	case hci.TypCommandPkt:
		err = h.handleCmd(b)
	case hci.TypACLDataPkt:
		err = h.l.HandleL2CAP(b)
	case hci.TypSCODataPkt:
		err = h.handleSCO(b)
	case hci.TypEventPkt:
		err = h.e.Dispatch(b)
	case hci.TypVendorPkt:
		err = h.handleVendor(b)
	default:
		log.Fatalf("Unknown Event: 0x%02X [ % X ]\n", t, b)
	}
	if err != nil {
		log.Printf("hci: %s, [ % X]", err, b)
	}
}

func (h *HCI) handleCmd(b []byte) error {
	// This is most likely command generated by Linux kernel.
	// In this case, we need to find a way to tell kernel not to touch the device.
	op := uint16(b[0]) | uint16(b[1])<<8
	log.Printf("unmanaged cmd: %s(0x%04X)\n", cmd.Opcode(op), op)
	return nil
}

func (h *HCI) handleSCO(b []byte) error {
	return fmt.Errorf("SCO packet not supported")
}

func (h *HCI) handleVendor(b []byte) error {
	return fmt.Errorf("Vendor packet not supported")
}

var defaultResetSeq = []cmd.CmdParam{
	cmd.Reset{},
	cmd.SetEventMask{EventMask: 0x3dbff807fffbffff},
	cmd.LESetEventMask{LEEventMask: 0x000000000000001F},
	cmd.WriteSimplePairingMode{SimplePairingMode: 1},
	cmd.WriteLEHostSupported{LESupportedHost: 1, SimultaneousLEHost: 0},
	cmd.WriteInquiryMode{InquiryMode: 2},
	cmd.WritePageScanType{PageScanType: 1},
	cmd.WriteInquiryScanType{ScanType: 1},
	cmd.WriteClassOfDevice{ClassOfDevice: [3]byte{0x40, 0x02, 0x04}},
	cmd.WritePageTimeout{PageTimeout: 0x2000},
	cmd.WriteDefaultLinkPolicy{DefaultLinkPolicySettings: 0x5},
	cmd.HostBufferSize{
		HostACLDataPacketLength:            0x1000,
		HostSynchronousDataPacketLength:    0xff,
		HostTotalNumACLDataPackets:         0x0014,
		HostTotalNumSynchronousDataPackets: 0x000a},
}

func (h HCI) resetDevice() error {
	for _, s := range defaultResetSeq {
		if err := h.c.SendAndCheckResp(s, []byte{0x00}); err != nil {
			return err
		}
	}
	return nil
}
